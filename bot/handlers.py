from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, Bot 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv
import os
import jwt
import datetime

from .text_parser import parse_dialogs
from .keyboards import keyboard, edit_keyboard
from .states import WordStates

load_dotenv()
    
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot,
                storage=MemoryStorage())

keywords = ["–Ω–∞—à—ë–ª", "–ø–æ—Ç–µ—Ä—è–ª"]

allowed_user = int(os.getenv("ALLOWED_USER"))

@dp.message_handler(lambda message: message.chat.id == allowed_user, commands=["start"])
async def start(message):
    await bot.send_message(message.chat.id, 
                           "–ü—Ä–∏–≤–µ—Ç",
                           reply_markup=keyboard)

@dp.message_handler(lambda message: message.chat.id == allowed_user, Text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤üîÑ"))
async def edit_words(message):
    await bot.send_message(message.chat.id,
                           "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
                           reply_markup=edit_keyboard)
    await WordStates.word.set()


@dp.message_handler(lambda message: message.chat.id == allowed_user, Text(equals="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚û°"), state=WordStates.word)
async def skip_words(message, state: FSMContext):
    await bot.send_message(message.chat.id,
                     "–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ",
                     reply_markup=keyboard)
    await state.finish()


@dp.message_handler(lambda message: message.chat.id == allowed_user, state=WordStates.word)
async def list_of_words(message, state: FSMContext):
    words = message.text.split("\n")
    if all(map(lambda x: len(x.split())==1, words)):
        await bot.send_message(message.chat.id,
                               "–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω‚úÖ",
                               reply_markup=keyboard)
        keywords = words
        print(keywords)
        await state.finish()
    else:
        await bot.send_message(message.chat.id,
                               "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ")
        

@dp.message_handler(lambda message: message.chat.id == allowed_user, Text(equals="–°–ø–∞—Ä—Å–∏—Ç—å —á–∞—Ç—ãü¶æ"))
async def parse_chats(message):
    await parse_dialogs(keywords)
    await bot.send_message(message.chat.id,
                           "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω‚úÖ")
    

@dp.message_handler(lambda message: message.chat.id == allowed_user, Text(equals="–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"))
async def get_token(message):
    jwt_payload = {
        "exp": datetime.datetime.utcnow() + datetime.timedelta(weeks=1)
    }
    message_text = f'–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–æ–≤–Ω–æ –Ω–µ–¥–µ–ª—é\n\n{jwt.encode(jwt_payload, os.getenv("JWT_KEY"), algorithm="HS256")}'
    await bot.send_message(message.chat.id,
                           message_text)

    